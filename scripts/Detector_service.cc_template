// Implementation of %%className%%

#include "artg4geantn02/detectors/%%headerName%%.hh"

#include "art/Framework/Services/Registry/ServiceMacros.h"

//#include CHANGE_ME: Add include for header for Art hit class

// Constructor for the service 
%%namespace%%::%%className%%::%%className%%(fhicl::ParameterSet const & p, art::ActivityRegistry & ) :
    DetectorBase(p,
                   p.get<std::string>("name", "CHANGE_ME:defaultName"),
                   p.get<std::string>("category", "CHANGE_ME:defaultCategory"),
                   p.get<std::string>("mother_category", "CHANGE_ME:defaultMother"))
{}

// Build the logical volumes
std::vector<G4LogicalVolume *> %%namespace%%::%%className%%::doBuildLVs() {

}

// Build the physical volumes
std::vector<G4VPhysicalVolume *> %%namespace%%::%%className%%::doPlaceToPVs( std::vector<G4LogicalVolume*>) {

}

// CHANGE_ME: You can delete the below if this detector creates no data

// Declare to Art what we are producing
void %%namespace%%::%%className%%::doCallArtProduces(art::EDProducer * producer) {

}

// Actually add the data to the event
void %%namespace%%::%%className%%::doFillEventWithArtHits(G4HCofThisEvent * hc) {
    
}

using %%namespace%%::%%className%%;
DEFINE_ART_SERVICE(%%className%%)